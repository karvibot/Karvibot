import telebot
import os

API_TOKEN = os.environ.get("API_TOKEN")
if not API_TOKEN:
    raise ValueError("API_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å Environment Variables.")

bot = telebot.TeleBot(API_TOKEN)

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –ø—Ä–æ–µ–∫—Ç–æ–≤
data_store = {}

# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –ø–æ–º–æ—â—å
help_text = """
–ü—Ä–∏–≤–µ—Ç! üëã –Ø —Ç–≤–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç-–±–æ—Ç.

–ö–æ–º–∞–Ω–¥—ã:
- /project –ù–∞–∑–≤–∞–Ω–∏–µ_–ø—Ä–æ–µ–∫—Ç–∞ ‚Äî –≤—ã–±—Ä–∞—Ç—å –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ–µ–∫—Ç
- –ø–æ—Å—Ç ‚Äî —à–∞–±–ª–æ–Ω –ø–æ—Å—Ç–∞
- reels ‚Äî —Å—Ü–µ–Ω–∞—Ä–∏–π Reels
- —Å—Ç–æ—Ä–∏—Å ‚Äî –∏–¥–µ—è –¥–ª—è Stories
- /plan ‚Äî —Å–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω –Ω–∞ –Ω–µ–¥–µ–ª—é
- /warmup ‚Äî –ø—Ä–∏–º–µ—Ä –ø—Ä–æ–≥—Ä–µ–≤–∞ –¥–ª—è –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
- /show ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –ø—Ä–æ–µ–∫—Ç–∞
"""

# –°—Ç–∞—Ä—Ç –∏ –ø–æ–º–æ—â—å
@bot.message_handler(commands=['start', 'help'])
def start(message):
    bot.reply_to(message, help_text)

# –°–æ–∑–¥–∞–Ω–∏–µ/–≤—ã–±–æ—Ä –ø—Ä–æ–µ–∫—Ç–∞
@bot.message_handler(commands=['project'])
def select_project(message):
    try:
        project_name = message.text.split(" ", 1)[1].strip()
    except IndexError:
        bot.reply_to(message, "‚ùå –£–∫–∞–∂–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /project")
        return

    user_id = str(message.from_user.id)
    if user_id not in data_store:
        data_store[user_id] = {}

    if project_name not in data_store[user_id]:
        data_store[user_id][project_name] = {
            "posts": [], "reels": [], "stories": [], "plans": [], "warmups": []
        }

    data_store[user_id]["current_project"] = project_name
    bot.reply_to(message, f"‚úÖ –í—ã–±—Ä–∞–Ω –ø—Ä–æ–µ–∫—Ç: {project_name}\n–¢–µ–ø–µ—Ä—å –º–æ–∂–µ—à—å –ø–∏—Å–∞—Ç—å: –ø–æ—Å—Ç, reels, —Å—Ç–æ—Ä–∏—Å.")

# –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
@bot.message_handler(commands=['show'])
def show_content(message):
    user_id = str(message.from_user.id)
    if user_id not in data_store or "current_project" not in data_store[user_id]:
        bot.reply_to(message, "‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ –ø—Ä–æ–µ–∫—Ç —á–µ—Ä–µ–∑ /project –ù–∞–∑–≤–∞–Ω–∏–µ_–ø—Ä–æ–µ–∫—Ç–∞")
        return

    project = data_store[user_id]["current_project"]
    content = data_store[user_id][project]
    response = f"üìÇ –ö–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ {project}:\n\n"
    for key in ["posts", "reels", "stories", "plans", "warmups"]:
        response += f"{key.upper()}:\n"
        for i, item in enumerate(content[key], 1):
            response += f"{i}. {item}\n"
        if not content[key]:
            response += "‚Äî –ø—É—Å—Ç–æ ‚Äî\n"
        response += "\n"
    bot.reply_to(message, response)

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω–∞
@bot.message_handler(commands=['plan'])
def generate_plan(message):
    user_id = str(message.from_user.id)
    if user_id not in data_store or "current_project" not in data_store[user_id]:
        bot.reply_to(message, "‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ –ø—Ä–æ–µ–∫—Ç —á–µ—Ä–µ–∑ /project –ù–∞–∑–≤–∞–Ω–∏–µ_–ø—Ä–æ–µ–∫—Ç–∞")
        return

    project = data_store[user_id]["current_project"]
    plan = (
        "üìÖ –ö–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω –Ω–∞ –Ω–µ–¥–µ–ª—é:\n"
        "–ü–Ω: –ø–æ—Å—Ç —Å –ª–∏—á–Ω–æ–π –∏—Å—Ç–æ—Ä–∏–µ–π\n"
        "–í—Ç: —Å—Ç–æ—Ä–∏—Å —Å –æ–ø—Ä–æ—Å–æ–º\n"
        "–°—Ä: Reels —Å –∏–Ω—Å–∞–π—Ç–æ–º\n"
        "–ß—Ç: –ø–æ—Å—Ç —Å –ø–æ–ª–µ–∑–Ω—ã–º —Å–æ–≤–µ—Ç–æ–º\n"
        "–ü—Ç: —Å—Ç–æ—Ä–∏—Å ¬´–ª–∞–π—Ñ—Ö–∞–∫¬ª\n"
        "–°–±: Reels —Å –∫–µ–π—Å–æ–º\n"
        "–í—Å: –ø–æ—Å—Ç —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –Ω–µ–¥–µ–ª–∏"
    )
    data_store[user_id][project]["plans"].append(plan)
    bot.reply_to(message, plan)

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–≥—Ä–µ–≤–∞
@bot.message_handler(commands=['warmup'])
def generate_warmup(message):
    user_id = str(message.from_user.id)
    if user_id not in data_store or "current_project" not in data_store[user_id]:
        bot.reply_to(message, "‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ –ø—Ä–æ–µ–∫—Ç —á–µ—Ä–µ–∑ /project –ù–∞–∑–≤–∞–Ω–∏–µ_–ø—Ä–æ–µ–∫—Ç–∞")
        return

    project = data_store[user_id]["current_project"]
    warmup = (
        "üî• –ü—Ä–æ–≥—Ä–µ–≤ –¥–ª—è –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤:\n"
        "1. –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –ª–∏—á–Ω–æ–π –±–æ–ª—å—é\n"
        "2. –†–∞—Å—Å–∫–∞–∑–∞—Ç—å, —á—Ç–æ —Ç—ã –∏—â–µ—à—å —Ä–µ—à–µ–Ω–∏–µ\n"
        "3. –°–ø—Ä–æ—Å–∏—Ç—å –º–Ω–µ–Ω–∏–µ –∞—É–¥–∏—Ç–æ—Ä–∏–∏\n"
        "4. –ü–æ–¥–≤–µ—Å—Ç–∏ –∫ –±—É–¥—É—â–µ–º—É –ø–æ—Å—Ç—É/Reels"
    )
    data_store[user_id][project]["warmups"].append(warmup)
    bot.reply_to(message, warmup)

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ—Å—Ç–æ–≤, Reels, —Å—Ç–æ—Ä–∏—Å
@bot.message_handler(func=lambda m: True)
def handle_message(message):
    user_id = str(message.from_user.id)
    if user_id not in data_store or "current_project" not in data_store[user_id]:
        bot.reply_to(message, "‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ –ø—Ä–æ–µ–∫—Ç —á–µ—Ä–µ–∑ /project –ù–∞–∑–≤–∞–Ω–∏–µ_–ø—Ä–æ–µ–∫—Ç–∞")
        return

    project = data_store[user_id]["current_project"]
    text = message.text.lower()
    response = ""

    if "–ø–æ—Å—Ç" in text:
        response = "‚úçÔ∏è –®–∞–±–ª–æ–Ω –ø–æ—Å—Ç–∞:\n1. –ö—Ä—é—á–æ–∫\n2. –ò—Å—Ç–æ—Ä–∏—è/–±–æ–ª—å\n3. –†–µ—à–µ–Ω–∏–µ\n4. –ü—Ä–∏–∑—ã–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é"
        data_store[user_id][project]["posts"].append(response)
    elif "reels" in text:
        response = "üé¨ –ü—Ä–∏–º–µ—Ä —Å—Ü–µ–Ω–∞—Ä–∏—è Reels:\n1. –í—Å—Ç—É–ø–ª–µ–Ω–∏–µ ‚Äî –±–æ–ª—å\n2. –ü–æ–≤–æ—Ä–æ—Ç\n3. –ö–æ—Ä–æ—Ç–∫–æ–µ —Ä–µ—à–µ–Ω–∏–µ\n4. –ö–æ–Ω—Ü–æ–≤–∫–∞"
        data_store[user_id][project]["reels"].append(response)
    elif "—Å—Ç–æ—Ä–∏—Å" in text:
        response = "üì± –ò–¥–µ—è –¥–ª—è —Å—Ç–æ—Ä–∏—Å:\n‚Äî –í–æ–ø—Ä–æ—Å –∞—É–¥–∏—Ç–æ—Ä–∏–∏\n‚Äî –í–∞—à —á–µ—Å—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç\n‚Äî –í–∏–∑—É–∞–ª—å–Ω—ã–π –∞–∫—Ü–µ–Ω—Ç"
        data_store[user_id][project]["stories"].append(response)
    else:
        response = "–Ø –ø–æ–∫–∞ —É—á—É—Å—å üòâ –°–∫–∞–∂–∏: –ø–æ—Å—Ç, reels, —Å—Ç–æ—Ä–∏—Å, /plan –∏–ª–∏ /warmup?"

    bot.reply_to(message, response)

bot.polling(none_stop=True)
