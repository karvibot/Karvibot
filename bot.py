import telebot
import os
import openai

# --- –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤ –∏–∑ Environment Variables ---
API_TOKEN = os.environ.get("API_TOKEN")      # Telegram Bot Token
OPENAI_KEY = os.environ.get("OPENAI_KEY")    # OpenAI GPT Key

if not API_TOKEN or not OPENAI_KEY:
    raise ValueError("API_TOKEN –∏–ª–∏ OPENAI_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω—ã! –ü—Ä–æ–≤–µ—Ä—å Environment Variables.")

bot = telebot.TeleBot(API_TOKEN)
openai.api_key = OPENAI_KEY

# --- –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –ø—Ä–æ–µ–∫—Ç–æ–≤ ---
data_store = {}

# --- –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ / –ø–æ–º–æ—â—å ---
help_text = """
–ü—Ä–∏–≤–µ—Ç! üëã –Ø —Ç–≤–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç-–±–æ—Ç.

–ü—Ä–æ—Å—Ç–æ –ø–∏—à–∏ –º–Ω–µ:
- "–°–¥–µ–ª–∞–π –ø–æ—Å—Ç –ø—Ä–æ —Ç–µ–º—É X"
- "–°–æ—Å—Ç–∞–≤—å Reels –Ω–∞ —Ç–µ–º—É Y"
- "–ü—Ä–∏–¥—É–º–∞–π —Å—Ç–æ—Ä–∏—Å –Ω–∞ —Ç–µ–º—É Z"
- "–°–æ–∑–¥–∞–π –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω –Ω–∞ –Ω–µ–¥–µ–ª—é –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ X"
- "–ü—Ä–∏–¥—É–º–∞–π –ø—Ä–æ–≥—Ä–µ–≤ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ X"

–Ø —Å–æ—Ö—Ä–∞–Ω—é –≤—Å—ë –∏ —Å–º–æ–≥—É –≤—ã–¥–∞–≤–∞—Ç—å –ø–æ –ø—Ä–æ–µ–∫—Ç–∞–º.
"""

@bot.message_handler(commands=['start', 'help'])
def start(message):
    bot.reply_to(message, help_text)

# --- –í—ã–±–æ—Ä/—Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ ---
@bot.message_handler(commands=['project'])
def select_project(message):
    text_parts = message.text.split(maxsplit=1)
    if len(text_parts) < 2 or not text_parts[1].strip():
        bot.reply_to(message, "‚ùå –£–∫–∞–∂–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /project")
        return

    project_name = text_parts[1].strip()
    user_id = str(message.from_user.id)

    if user_id not in data_store:
        data_store[user_id] = {}

    if project_name not in data_store[user_id]:
        data_store[user_id][project_name] = {
            "posts": [], "reels": [], "stories": [], "plans": [], "warmups": []
        }

    data_store[user_id]["current_project"] = project_name
    bot.reply_to(message, f"‚úÖ –í—ã–±—Ä–∞–Ω –ø—Ä–æ–µ–∫—Ç: {project_name}\n–¢–µ–ø–µ—Ä—å –º–æ–∂–µ—à—å –ø–∏—Å–∞—Ç—å –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ –∫–æ–Ω—Ç–µ–Ω—Ç.")

# --- –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç ---
@bot.message_handler(commands=['show'])
def show_content(message):
    user_id = str(message.from_user.id)
    if user_id not in data_store or "current_project" not in data_store[user_id]:
        bot.reply_to(message, "‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ –ø—Ä–æ–µ–∫—Ç —á–µ—Ä–µ–∑ /project –ù–∞–∑–≤–∞–Ω–∏–µ_–ø—Ä–æ–µ–∫—Ç–∞")
        return

    project = data_store[user_id]["current_project"]
    content = data_store[user_id][project]
    response = f"üìÇ –ö–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ {project}:\n\n"
    for key in ["posts", "reels", "stories", "plans", "warmups"]:
        response += f"{key.upper()}:\n"
        for i, item in enumerate(content[key], 1):
            response += f"{i}. {item}\n"
        if not content[key]:
            response += "‚Äî –ø—É—Å—Ç–æ ‚Äî\n"
        response += "\n"
    bot.reply_to(message, response)

# --- –û—Å–Ω–æ–≤–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ GPT ---
def generate_gpt(prompt):
    try:
        completion = openai.ChatCompletion.create(
            model="gpt-4",
            messages=[{"role": "user", "content": prompt}],
            temperature=0.7
        )
        return completion.choices[0].message.content.strip()
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ GPT: {e}"

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π ---
@bot.message_handler(func=lambda m: True)
def handle_message(message):
    user_id = str(message.from_user.id)
    if user_id not in data_store or "current_project" not in data_store[user_id]:
        bot.reply_to(message, "‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ –ø—Ä–æ–µ–∫—Ç —á–µ—Ä–µ–∑ /project –ù–∞–∑–≤–∞–Ω–∏–µ_–ø—Ä–æ–µ–∫—Ç–∞")
        return

    project = data_store[user_id]["current_project"]
    text = message.text.strip()

    # --- –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∑–∞–ø—Ä–æ—Å–∞ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º ---
    if "–ø–æ—Å—Ç" in text.lower():
        prompt = f"–°–¥–µ–ª–∞–π —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞ –¥–ª—è Instagram: {text}"
        result = generate_gpt(prompt)
        data_store[user_id][project]["posts"].append(result)
    elif "reels" in text.lower():
        prompt = f"–ü—Ä–∏–¥—É–º–∞–π —Å—Ü–µ–Ω–∞—Ä–∏–π Reels: {text}"
        result = generate_gpt(prompt)
        data_store[user_id][project]["reels"].append(result)
    elif "—Å—Ç–æ—Ä–∏—Å" in text.lower():
        prompt = f"–ü—Ä–∏–¥—É–º–∞–π –∏–¥–µ—é –¥–ª—è —Å—Ç–æ—Ä–∏—Å: {text}"
        result = generate_gpt(prompt)
        data_store[user_id][project]["stories"].append(result)
    elif "–∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω" in text.lower() or "plan" in text.lower():
        prompt = f"–°–æ—Å—Ç–∞–≤—å –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω –Ω–∞ –Ω–µ–¥–µ–ª—é –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ {project}"
        result = generate_gpt(prompt)
        data_store[user_id][project]["plans"].append(result)
    elif "–ø—Ä–æ–≥—Ä–µ–≤" in text.lower() or "warmup" in text.lower():
        prompt = f"–ü—Ä–∏–¥—É–º–∞–π –ø—Ä–æ–≥—Ä–µ–≤ –¥–ª—è –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞ {project}"
        result = generate_gpt(prompt)
        data_store[user_id][project]["warmups"].append(result)
    else:
        # –ï—Å–ª–∏ –Ω–µ –ø–æ–Ω—è–ª–∏ —Ç–æ—á–Ω–æ, —Å–ø—Ä–æ—Å–∏–º —É GPT —á—Ç–æ –¥–µ–ª–∞—Ç—å
        prompt = f"–¢—ã –∫–æ–Ω—Ç–µ–Ω—Ç-–±–æ—Ç. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–ø–∏—Å–∞–ª: {text}. –°–æ–∑–¥–∞–π –ø–æ—Å—Ç, Reels, —Å—Ç–æ—Ä–∏—Å, –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω –∏–ª–∏ –ø—Ä–æ–≥—Ä–µ–≤, —á—Ç–æ –ª—É—á—à–µ –ø–æ–¥—Ö–æ–¥–∏—Ç."
        result = generate_gpt(prompt)
        data_store[user_id][project]["posts"].append(result)

    bot.reply_to(message, result)

# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
bot.polling(none_stop=True)
